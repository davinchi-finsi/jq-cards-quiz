/**
 * @license jq-cards-quiz v1.0.2
 * (c) 2018 Finsi, Inc.
 */

import"flip";var CardsQuizEvents;!function(s){s.onCardFlip="cardsQuiz:cardFlip",s.onQuestionChange="cardsQuiz:questionChange",s.onEnd="cardsQuiz:end"}(CardsQuizEvents||(CardsQuizEvents={}));class CardsQuizCardRegistry{constructor(s={}){this.answersIds=[],this.answersValues=[],void 0!=s.element&&(this.element=s.element),void 0!=s.question&&(this.question=s.question),void 0!=s.answersIds&&(this.answersIds=s.answersIds),void 0!=s.answersValues&&(this.answersValues=s.answersValues),void 0!=s.isCorrect&&(this.isCorrect=s.isCorrect),void 0!=s.flipOptions&&(this.flipOptions=s.flipOptions),this.init()}flip(){this.instance.flip()}unflip(){this.instance.unflip()}detachFlip(){this.element.off(".flip")}get isFlipped(){return this.instance.isFlipped}init(){this.element&&(this.detachFlip(),this.element.flip(this.flipOptions),this.instance=this.element.data("flipModel"))}}class CardsQuizGame{disable(){this._super(),this.element.addClass(this.options.classes.disabled),this.quizInstance.disable()}enable(){this._super(),this.element.removeClass(this.options.classes.disabled),this.quizInstance.enable()}activateCard(s){if(!this.options.disabled&&!this.isCardInTransition)if(void 0!=s){let i=this.cardsRegistry[s];i&&(this.isCardInTransition=!0,void 0!=this.currentCard&&this.currentCard!=i&&(this.currentCard.element.removeClass(this.options.classes.cardActive),void 0!=this.currentCard.answersIds&&0!=this.currentCard.answersIds.length||(this.quizInstance.goTo(null),this.currentCard.unflip())),void 0==this.currentCard||this.currentCard!=i?(this.currentCard=i,i.element.addClass(this.options.classes.cardActive),i.instance.isFlipped?this.quizInstance.goTo(s):i.flip()):this.isCardInTransition=!1)}else this.currentCard&&(this.isCardInTransition=!0,this.quizInstance.goTo(null),this.currentCard.element.removeClass(this.options.classes.cardActive),this.currentCard.unflip())}_getCreateOptions(){return{namespace:"jq-cards-quiz",questionAttribute:"data-cq-question",classes:{root:"c-cards-quiz",disabled:"c-cards-quiz--disabled",quiz:"c-cards-quiz__quiz",cardsWrapper:"c-cards-quiz__cards",card:"c-cards-quiz__card",cardIsCorrect:"c-cards-quiz__card--correct",cardIsIncorrect:"c-cards-quiz__card--incorrect",cardActive:"c-cards-quiz__card--active"},selectors:{cardsWrapper:"[data-cq-cards]",card:"[data-cq-card]",quiz:"[data-cq-quiz]"},flip:{},jqQuiz:{}}}_create(){this.element.addClass(this.options.classes.root),this._init(),this._assignEvents()}_init(){this.cardsWrapper=this.element.find(this.options.selectors.cardsWrapper).addClass(this.options.classes.cardsWrapper),this.cards=this.cardsWrapper.find(this.options.selectors.card).addClass(this.options.classes.card),this.quiz=this.element.find(this.options.selectors.quiz).addClass(this.options.classes.quiz);let s=$.extend(!0,{},this.options.jqQuiz,{autoStart:!0,initialQuestion:null,autoGoNext:!1});this.quiz.jqQuiz(s),this.quizInstance=this.quiz.jqQuiz("instance"),this.cardsRegistry={};for(let s=0,i=this.cards.length;s<i;s++){let i=this.cards.eq(s),t=i.attr(this.options.questionAttribute);if(void 0==t)throw"[CardsQuizGame] The card must have a question";{let s,e=this._getDataOptions(i,"flip");(e=Object.keys(this._getDataOptions(i,"flip")).length>0?e:this.options.flip).trigger="manual",s=new CardsQuizCardRegistry({element:i,question:t,flipOptions:e}),this.cardsRegistry[t]=s}}}_onQuizChange(s,i,t,e,n,r){this.currentCard.answersIds=r.options,this.currentCard.answersValues=r.optionsValues,this.currentCard.isCorrect=r.isCorrect;let a,o;this.currentCard.isCorrect?(a=this.options.classes.cardIsCorrect,o=this.options.classes.cardIsIncorrect):(a=this.options.classes.cardIsIncorrect,o=this.options.classes.cardIsCorrect),this.currentCard.element.removeClass(o).addClass(a),this.element.triggerHandler(CardsQuizEvents.onQuestionChange,[{instance:this,card:this.currentCard,questionChange:{questionId:t,optionId:e,optionValue:n}}])}_onQuizEnd(s,i,t){this.quizInstance.disable(),this.disable(),this.element.triggerHandler(CardsQuizEvents.onEnd,[{instance:this,calification:t}])}_onCardClick(s){if(!this.options.disabled&&!this.isCardInTransition){const i=$(s.currentTarget),t=i.attr(this.options.questionAttribute);this.activateCard(t)}}_assignEvents(){this.cardsWrapper.off("."+this.options.namespace),this.quiz.off("."+this.options.namespace),this.cardsWrapper.on("flip:done."+this.options.namespace,this.options.selectors.card,this._onCardFlip.bind(this)),this.cardsWrapper.on("click."+this.options.namespace,this.options.selectors.card,this._onCardClick.bind(this)),this.quiz.on($.ui.jqQuiz.prototype.ON_OPTION_CHANGE+"."+this.options.namespace,this._onQuizChange.bind(this)),this.quiz.on($.ui.jqQuiz.prototype.ON_END+"."+this.options.namespace,this._onQuizEnd.bind(this)),this.quiz.on($.ui.jqQuiz.prototype.ON_QUESTION_SHOW+"."+this.options.namespace,this._onQuestionShown.bind(this))}_onQuestionShown(){this.isCardInTransition=!1}_onCardFlip(s){const i=$(s.currentTarget).attr(this.options.questionAttribute),t=this.cardsRegistry[i];t&&t==this.currentCard&&this.quizInstance.goTo(i),this.element.triggerHandler(CardsQuizEvents.onCardFlip,[{instance:this,card:t}])}_getDataOptions(s,i){let t=$(s).data(),e={};for(let s in t)if(-1!==s.search(i)){let n=s.replace(i,"");n=n.charAt(0).toLowerCase().concat(n.substring(1));let r=t[s];try{r=JSON.parse(r)}catch(s){}e[n]=r}return e}}if(Object.hasOwnProperty("getOwnPropertyDescriptors")){let s={},i=Object.getOwnPropertyNames(CardsQuizGame.prototype);for(let t=0,e=i.length;t<e;t++){let e=i[t];s[e]=Object.getOwnPropertyDescriptor(CardsQuizGame.prototype,e).value}$.widget("ui.cardsQuiz",s)}else $.widget("ui.cardsQuiz",CardsQuizGame.prototype);export{CardsQuizEvents,CardsQuizCardRegistry,CardsQuizGame};
